#include <stdio.h>
#include <stdlib.h>
#define INF 99999 // Define a large value to represent infinity


// Function to implement the Floyd-Warshall Algorithm
void floydWarshall(int **graph, int n) {
    // Create a distance matrix dynamically
    int **dist = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        dist[i] = (int *)malloc(n * sizeof(int));
    }


    // Initialize the distance matrix with the input graph
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            dist[i][j] = graph[i][j];
        }
    }


    // Floyd-Warshall algorithm
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // Update the shortest distance
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }


    // Print the shortest distance matrix
    printf("Shortest distances between all pairs of vertices:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (dist[i][j] == INF) {
                printf("%7s", "INF");
            } else {
                printf("%7d", dist[i][j]);
            }
        }
        printf("\n");
    }


    // Free the dynamically allocated memory
    for (int i = 0; i < n; i++) {
        free(dist[i]);
    }
    free(dist);
}


int main() {
    int n;


    // Input the number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &n);


    // Dynamically allocate memory for the graph
    int **graph = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        graph[i] = (int *)malloc(n * sizeof(int));
    }


    // Input the weight matrix
    printf("Enter the weight matrix (use %d for infinity):\n", INF);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }


    // Perform Floyd-Warshall Algorithm
    floydWarshall(graph, n);


    // Free the dynamically allocated memory for the graph
    for (int i = 0; i < n; i++) {
        free(graph[i]);
    }
    free(graph);


    return 0;
}